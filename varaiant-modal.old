import { gql, useMutation, useQuery } from "@apollo/client";
import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { fetchSelectOptions } from "../pages/add-products";
import { ErrorMessage } from "./error-message";
import { ModalProps, MyModal } from "./Modal";

export interface VariantModalProps extends ModalProps {
  productId: string;
  slug?: string;
}

export type VariantFormInput = {
  name: string;
  size: string;
  fragrance: string;
  type: string;
  image?: string;
};

type CreateProductVariantInput = {
  name: string;
  asset?: any;
  facetValues?: any[];
  product?: any;
};

type UpdateProductVariantInput = {
  productVariantId?: string;
  name: string;
  asset?: any;
  facetValues?: any[];
};

const defaultValues: VariantFormInput = {
  name: "",
  type: "",
  fragrance: "",
  size: "",
  image: "",
};

const SELECT_FIELD_OPTIONS_QUERY = gql`
  query SELECT_FIELD_OPTIONS_QUERY($id: ID) {
    Type: Facet(where: { name: "Type" }) {
      types: values(orderBy: { name: asc }) {
        value: id
        label: name
      }
    }
    Fragrance: Facet(where: { name: "Fragrance" }) {
      fragrances: values(orderBy: { name: asc }) {
        value: id
        label: name
      }
    }
    Size: Facet(where: { name: "Size" }) {
      sizes: values(orderBy: { name: asc }) {
        value: id
        label: name
      }
    }
    Asset: allAssets(where: { product: { id: $id } }) {
      value: id
      label: altText
    }
  }
`;

const UPDATE_PRODUCT_VARIANT_MUTATION = gql`
  mutation UPDATE_PRODUCT_VARIANT_MUTATION(
    $productVariantId: ID!
    $name: String
    $asset: AssetWhereUniqueInput
    $facetValues: [FacetValueWhereUniqueInput]
  ) {
    updateProductVariant(
      id: $productVariantId
      data: {
        name: $name
        asset: { connect: $asset }
        facetValues: { connect: $facetValues }
      }
    ) {
      name
      Size: facetValues(where: { facet: { name: "Size" } }) {
        size: name
      }
      Fragrance: facetValues(where: { facet: { name: "Fragrance" } }) {
        fragrance: name
      }
      Type: facetValues(where: { facet: { name: "Type" } }) {
        type: name
      }
      Image: asset {
        image: altText
      }
    }
  }
`;

const PRODUCT_VARIANT_QUERY = gql`
  query PRODUCT_VARIANT_QUERY($id: ID) {
    ProductVariant(where: { id: $id }) {
      name
      Size: facetValues(where: { facet: { name: "Size" } }) {
        size: id
      }
      Fragrance: facetValues(where: { facet: { name: "Fragrance" } }) {
        fragrance: id
      }
      Type: facetValues(where: { facet: { name: "Type" } }) {
        type: id
      }
      Image: asset {
        image: id
      }
    }
  }
`;

const CREATE_PRODUCT_VARIANT_MUTATION = gql`
  mutation CREATE_PRODUCT_VARIANT_MUTATION(
    $name: String
    $asset: AssetWhereUniqueInput
    $facetValues: [FacetValueWhereUniqueInput]
    $product: ProductWhereUniqueInput
  ) {
    createProductVariant(
      data: {
        name: $name
        asset: { connect: $asset }
        facetValues: { connect: $facetValues }
        product: { connect: $product }
      }
    ) {
      name
      product {
        id
        slug
      }
    }
  }
`;

export const VariantModal = ({
  modalIsOpen,
  afterOpenModal,
  closeModal,
  productId,
  slug,
  productVariantId,
  heading,
}: VariantModalProps) => {
  console.log("2: ", productVariantId);
  const selectOptions = fetchSelectOptions(SELECT_FIELD_OPTIONS_QUERY, {
    id: productId,
  });
  let operation: any, productVariant: any;

  (productVariantId &&
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (operation = useMutation(UPDATE_PRODUCT_VARIANT_MUTATION))) ||
    (!productVariantId &&
      // eslint-disable-next-line react-hooks/rules-of-hooks
      (operation = useMutation(CREATE_PRODUCT_VARIANT_MUTATION)));

  productVariant = useQuery(PRODUCT_VARIANT_QUERY, {
    variables: { id: productVariantId },
  });

  console.log(productVariant);

  const queriedUpdateData: VariantFormInput = {
    name: productVariant ? productVariant?.data?.ProductVariant?.name : "",
    type: productVariant
      ? productVariant?.data?.ProductVariant?.Type[0]?.type
      : "",
    fragrance: productVariant
      ? productVariant?.data?.ProductVariant?.Fragrance[0]?.fragrance
      : "",
    size: productVariant
      ? productVariant?.data?.ProductVariant?.Size[0]?.size
      : "",
    image: productVariant
      ? productVariant?.data?.ProductVariant?.Image?.image
      : "",
  };

  const [operateProductVariant, { loading, error, data }] = operation;

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitSuccessful },
    reset,
    watch,
    setValue,
  } = useForm<VariantFormInput>({
    defaultValues: productVariantId ? queriedUpdateData : defaultValues,
  });

  useEffect(() => {
    if (isSubmitSuccessful) {
      reset(defaultValues);
    }
    if (!productVariant?.loading) {
      reset(queriedUpdateData);
    }
  }, [isSubmitSuccessful, reset, productVariant?.loading]);

  const onSubmit = async (recievedData: VariantFormInput) => {
    const { name, size, fragrance, type, image } = recievedData;

    const createProductVariantInput: CreateProductVariantInput = {
      name,
      asset: { id: image },
      facetValues: [{ id: size }, { id: fragrance }, { id: type }],
      product: { id: productId },
    };

    const updateProductVariantInput: UpdateProductVariantInput = {
      productVariantId,
      name,
      asset: { id: image },
      facetValues: [{ id: size }, { id: fragrance }, { id: type }],
    };

    console.log(
      productVariantId ? updateProductVariantInput : createProductVariantInput
    );
    try {
      const res = await operateProductVariant({
        variables: productVariantId
          ? updateProductVariantInput
          : createProductVariantInput,
      });
      console.log(res);
    } catch (error) {
      console.log(error);
    }
  };

  if (selectOptions.loading) return <p>Loading...</p>;
  if (selectOptions.error) return <ErrorMessage error={selectOptions.error} />;

  const {
    Type: { types },
    Fragrance: { fragrances },
    Size: { sizes },
    Asset,
  } = selectOptions.data;
  const typeOptions = [...types];
  const fragranceOptions = [...fragrances];
  const sizeOptions = [...sizes];
  const assetOptions = [...Asset];
  return (
    <MyModal
      afterOpenModal={afterOpenModal}
      modalIsOpen={modalIsOpen}
      closeModal={closeModal}
      heading={heading}
    >
      {console.log("Modal: ", productVariantId)}
      <form
        className="flex flex-col space-y-5 mx-5 pt-5 "
        onSubmit={handleSubmit(onSubmit)}
      >
        <ErrorMessage error={error} />
        <fieldset className="space-y-3" disabled={loading} aria-busy={loading}>
          <div className="flex flex-col space-y-1">
            <label htmlFor="name">Name:</label>
            <input
              type="text"
              className="form-input w-full rounded-md"
              {...register("name", { required: "This is required" })}
              // value={queriedUpdateData?.name}
            />
            {errors?.name && <p>{errors.name.message}</p>}
          </div>
          <div className="flex flex-col space-y-1">
            <label htmlFor="size">Size:</label>
            <select
              {...register("size", {
                required: "This is required",
              })}
              className="form-select rounded-md"
              // value={queriedUpdateData?.size}
            >
              {sizeOptions.map((option) => (
                <option key={option.label} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {errors?.type && <p>{errors.type.message}</p>}
          </div>
          <div className="flex flex-col space-y-1">
            <label htmlFor="type">Type:</label>
            <select
              {...register("type", { required: "This is required" })}
              className="form-select rounded-md"
              // value={queriedUpdateData?.type}
            >
              {typeOptions.map((option) => (
                <option key={option.label} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {errors?.fragrance && <p>{errors.fragrance.message}</p>}
          </div>
          <div className="flex flex-col space-y-1">
            <label htmlFor="fragrance">Fragrance:</label>
            <select
              {...register("fragrance", {
                required: "This is required",
              })}
              className="form-select rounded-md"
              // value={queriedUpdateData?.fragrance}
            >
              {fragranceOptions.map((option) => (
                <option key={option.label} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {errors?.size && <p>{errors.size.message}</p>}
          </div>

          <div className="flex flex-col space-y-1">
            <label htmlFor="image">Image:</label>
            <select
              {...register("image", {
                required: "This is required",
              })}
              className="form-select rounded-md"
              // value={queriedUpdateData?.image}
            >
              {assetOptions.map((option) => (
                <option key={option.label} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {errors?.image && <p>{errors.image.message}</p>}
          </div>
        </fieldset>

        <input
          type="submit"
          value={productVariantId ? "UPDATE" : "CREATE"}
          className="form-input py-2 rounded-md bg-gray-100 hover:bg-gray-200 tracking-widest"
        />
      </form>
    </MyModal>
  );
};
